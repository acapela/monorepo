name: CI
on:
  push:
    branches:
      - "**"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    concurrency:
      group: lint-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - run: yarn run lint

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    concurrency:
      group: frontend-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          npm install -g hasura-cli
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: yarn run frontend:test
      - run: yarn typecheck

  backend:
    name: Backend
    runs-on: ubuntu-latest
    concurrency:
      group: backend-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          npm install -g hasura-cli
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: yarn run backend:test
      - run: yarn shared test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    concurrency:
      group: e2e-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - run: npx playwright install
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          npm install -g hasura-cli
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - name: Start backend
        run: |
          cd backend/
          ./start-ci.sh
          cd -
      - uses: actions/cache@v2
        with:
          path: frontend/.next
          key: ${{ runner.os }}-next-${{ github.sha }}
      - name: Build frontend
        run: yarn run frontend:build
      - name: Start frontend
        run: |
          cd frontend/
          ./start-ci.sh
          cd -
      - name: Test Connection
        run: |
          curl -v localhost:3000/healthz
          curl -v localhost:1337/healthz
      - run: yarn e2e test
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: test-artifacts
          path: e2e/test-results/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, frontend, backend, e2e]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: semantic-release
        uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-file: package.json
      - run: rm -f .npmrc
        if: steps.semrel.outputs.version != ''
      - uses: actions/cache@v2
        with:
          path: frontend/.next
          key: ${{ runner.os }}-next-${{ github.sha }}
        if: steps.semrel.outputs.version != ''
      - run: yarn
        if: steps.semrel.outputs.version != ''
      - name: Run hasura migrations
        run: |
          cp .env.sample .env
          npm install -g hasura-cli
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
          docker-compose -f ./docker-compose.ci.yaml down -v
          rm .env
        if: steps.semrel.outputs.version != ''
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: meetnomoreapp
          service_account_key: ${{ secrets.GCLOUD_AUTH }}
        if: steps.semrel.outputs.version != ''
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        if: steps.semrel.outputs.version != ''
      - name: Set up kubectl
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: cluster-1
          location: europe-west1
          credentials: ${{ secrets.GCLOUD_AUTH }}
        if: steps.semrel.outputs.version != ''
      - run: gcloud auth configure-docker eu.gcr.io -q
        if: steps.semrel.outputs.version != ''
      - run: ./scripts/build-deploy.sh ${{ steps.semrel.outputs.version }}
        if: steps.semrel.outputs.version != ''
        env:
          KUSTOMIZE_BIN: ./kustomize
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
