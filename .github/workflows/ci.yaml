name: CI
on:
  push:
    branches:
      - "**"

jobs:
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    concurrency:
      group: typecheck-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: yarn lint
      - run: yarn typecheck

  tests:
    name: Tests
    runs-on: ubuntu-latest
    concurrency:
      group: tests-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: yarn backend:test
      - run: yarn shared test
      - run: yarn clientdb test

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    concurrency:
      group: e2e-${{ github.ref }}
      cancel-in-progress: true
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      - run: yarn run-e2e-tests
        env:
          DISPLAY: ":99.0"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [typecheck, tests, e2e]
    steps:
      - uses: actions/checkout@v2
      - name: semantic-release
        uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GH_RELEASES_TOKEN }}
          update-file: package.json
      - run: rm -f .npmrc
        if: steps.semrel.outputs.version != ''
      - uses: ./.github/actions/node-and-yarn
        if: steps.semrel.outputs.version != ''
      - name: Run hasura migrations
        run: |
          cp .env.sample .env
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
          docker-compose -f ./docker-compose.ci.yaml down -v
          rm .env
        if: steps.semrel.outputs.version != ''
      - uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCLOUD_AUTH }}
        if: steps.semrel.outputs.version != ''
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: meetnomoreapp
        if: steps.semrel.outputs.version != ''
      - name: Set up kubectl
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: cluster-1
          location: europe-west1
        if: steps.semrel.outputs.version != ''
      - run: gcloud auth configure-docker eu.gcr.io -q
        if: steps.semrel.outputs.version != ''
      - run: ./scripts/build-deploy.sh ${{ steps.semrel.outputs.version }}
        if: steps.semrel.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_PRODUCT_WEBHOOK_URL: ${{ secrets.SLACK_PRODUCT_WEBHOOK_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: acapela
          SENTRY_PROJECT: acapela
