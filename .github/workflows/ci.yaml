name: CI
on:
  push:
    branches:
      - "**"
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: npm run lint

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - name: Setup dotenv
        run: cp .env.sample .env
      - run: npm run frontend:test
      - run: npm run frontend:build

  backend:
    name: Backend
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:12
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: dev
          POSTGRES_DB: dev_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      hasura:
        image: hasura/graphql-engine:v1.3.2
        ports:
          - "8080:8080"
        env:
          HASURA_GRAPHQL_DATABASE_URL: postgres://user:dev@postgres:5432/dev_db
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "15"
      - uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - name: Migrate postgres using hasura migrations
        run: |
          cd infrastructure/hasura
          npm install hasura-cli -g
          hasura migrate status --skip-update-check --endpoint http://localhost:8080
          hasura migrate apply --skip-update-check --endpoint http://localhost:8080
      - name: Setup dotenv
        run: cp .env.sample .env
      - run: npm run backend:test

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v2
      - run: docker build -t test .

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker]
    steps:
      - uses: actions/checkout@v2
      - name: semantic-release
        uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          update-file: package.json
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: meetnomoreapp
          service_account_key: ${{ secrets.GCLOUD_AUTH }}
        if: steps.semrel.outputs.version != ''
      - run: gcloud auth configure-docker eu.gcr.io -q
        if: steps.semrel.outputs.version != ''
      - run: ./scripts/build-deploy.sh ${{ steps.semrel.outputs.version }}
        if: steps.semrel.outputs.version != ''
        env:
          GH_BOT_TOKEN: ${{ secrets.GH_BOT_TOKEN }}
