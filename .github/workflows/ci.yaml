name: CI
on:
  push:
    branches:
      - "**"

jobs:
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    concurrency:
      group: typecheck-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: yarn lint
      - run: yarn typecheck

  tests:
    name: Tests
    runs-on: ubuntu-latest
    concurrency:
      group: tests-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/node-and-yarn
      - name: Setup dotenv
        run: cp .env.sample .env
      - name: Run hasura migrations
        run: |
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
      - run: yarn backend:test
      - run: yarn shared test
      - run: yarn clientdb test

  #  e2e:
  #    name: E2E Tests
  #    runs-on: ubuntu-latest
  #    concurrency:
  #      group: e2e-${{ github.ref }}
  #      cancel-in-progress: true
  #    steps:
  #      - uses: actions/checkout@v2
  #      - uses: ./.github/actions/node-and-yarn
  #      - run: npx playwright install
  #      - name: Setup dotenv
  #        env:
  #          SLACK_CLIENT_SECRET: ${{ secrets.SLACK_CLIENT_SECRET }}
  #          SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
  #          SLACK_STATE_SECRET: ${{ secrets.SLACK_STATE_SECRET }}
  #        run: |
  #          cat .env.sample > .env
  #          {
  #            echo "SLACK_CLIENT_ID=1453742769187.2863472186114"
  #            echo "SLACK_CLIENT_SECRET=$SLACK_CLIENT_SECRET"
  #            echo "SLACK_SIGNING_SECRET=$SLACK_SIGNING_SECRET"
  #            echo "SLACK_STATE_SECRET=$SLACK_STATE_SECRET"
  #            echo "SLACK_SLASH_COMMAND=testapela"
  #          } >> .env
  #
  #          cat .env
  #      - name: Run hasura migrations
  #        run: |
  #          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
  #          sleep 5
  #          yarn hasura:update
  #          yarn generate
  #      - name: Start backend
  #        env:
  #          NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
  #          NGROK_SUBDOMAIN: testapela
  #        run: |
  #          cd backend/
  #          ./start-ci.sh
  #          cd -
  #      - uses: actions/cache@v2
  #        with:
  #          path: frontend/.next
  #          key: ${{ runner.os }}-next-${{ github.sha }}
  #      - name: Build frontend
  #        run: yarn run frontend:build
  #      - name: Start frontend
  #        run: |
  #          cd frontend/
  #          ./start-ci.sh
  #          cd -
  #      - name: Test Connection
  #        run: |
  #          sleep 3
  #          curl -v localhost:3000/healthz
  #          curl -v localhost:1337/healthz
  #      - run: yarn e2e test
  #        env:
  #          TEST_SLACK_EMAIL: ${{ secrets.TEST_SLACK_EMAIL }}
  #          TEST_SLACK_PASSWORD: ${{ secrets.TEST_SLACK_PASSWORD }}
  #      - uses: actions/upload-artifact@v2
  #        if: ${{ failure() }}
  #        with:
  #          name: e2e-test-logs
  #          path: |
  #            frontend/frontend.log
  #            backend/backend.log
  #      - uses: actions/upload-artifact@v2
  #        if: ${{ failure() }}
  #        with:
  #          name: test-artifacts
  #          path: e2e/test-results/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [typecheck, tests]
    steps:
      - uses: actions/checkout@v2
      - name: semantic-release
        uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GH_RELEASES_TOKEN }}
          update-file: package.json
      - run: rm -f .npmrc
        if: steps.semrel.outputs.version != ''
      - uses: ./.github/actions/node-and-yarn
        if: steps.semrel.outputs.version != ''
      - name: Run hasura migrations
        run: |
          cp .env.sample .env
          docker-compose -f ./docker-compose.ci.yaml --env-file .env up -d
          sleep 5
          yarn hasura:update
          yarn generate
          docker-compose -f ./docker-compose.ci.yaml down -v
          rm .env
        if: steps.semrel.outputs.version != ''
      - uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCLOUD_AUTH }}
        if: steps.semrel.outputs.version != ''
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: meetnomoreapp
        if: steps.semrel.outputs.version != ''
      - name: Set up kubectl
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: cluster-1
          location: europe-west1
        if: steps.semrel.outputs.version != ''
      - run: gcloud auth configure-docker eu.gcr.io -q
        if: steps.semrel.outputs.version != ''
      - run: ./scripts/build-deploy.sh ${{ steps.semrel.outputs.version }}
        if: steps.semrel.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_PRODUCT_WEBHOOK_URL: ${{ secrets.SLACK_PRODUCT_WEBHOOK_URL }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#      - run: yarn e2e test electron
