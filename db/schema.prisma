generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model account {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at           DateTime  @default(now()) @db.Timestamptz(6)
  user_id              String    @db.Uuid
  provider_id          String
  provider_type        String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime? @db.Timestamptz(6)
  updated_at           DateTime  @default(now()) @db.Timestamptz(6)
  user                 user      @relation(fields: [user_id], references: [id])
}

model attachment {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  original_name       String
  mime_type           String
  message_attachments message_attachments[]
}

model message {
  thread_id           String                @db.Uuid
  user_id             String                @db.Uuid
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  type                String
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  is_draft            Boolean               @default(false)
  content             Json                  @default(dbgenerated("jsonb_build_array()"))
  transcription_id    String?               @db.Uuid
  content             Json                  @default(dbgenerated("jsonb_build_array()"))
  thread              thread                @relation(fields: [thread_id], references: [id])
  transcription       transcription?        @relation(fields: [transcription_id], references: [id])
  message_type        message_type          @relation(fields: [type], references: [value])
  user                user                  @relation(fields: [user_id], references: [id])
  message_attachments message_attachments[]
}

model message_attachments {
  message_id    String     @db.Uuid
  attachment_id String     @db.Uuid
  attachment    attachment @relation(fields: [attachment_id], references: [id])
  message       message    @relation(fields: [message_id], references: [id])

  @@id([message_id, attachment_id])
}

model message_type {
  value   String    @id
  message message[]
}

model room {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  creator_id          String              @db.Uuid
  name                String?
  created_at          DateTime            @default(now()) @db.Timestamptz(6)
  deadline            DateTime            @default(now()) @db.Timestamptz(6)
  notification_job_id String?
  summary             String?
  finished_at         DateTime?           @db.Timestamptz(6)
  user                user                @relation(fields: [creator_id], references: [id])
  room_invites        room_invites[]
  room_participants   room_participants[]
  thread              thread[]
}

model room_invites {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  room_id    String    @db.Uuid
  inviter_id String    @db.Uuid
  code       String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  used_at    DateTime? @db.Timestamptz(6)
  user       user      @relation(fields: [inviter_id], references: [id])
  room       room      @relation(fields: [room_id], references: [id])

  @@unique([room_id, email], name: "room_invites_room_id_email_key")
}

model room_participants {
  room_id String @db.Uuid
  user_id String @db.Uuid
  room    room   @relation(fields: [room_id], references: [id])
  user    user   @relation(fields: [user_id], references: [id])

  @@id([room_id, user_id])
  @@unique([room_id, user_id], name: "room_participants_room_id_user_id_key")
}

model thread {
  id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  room_id String    @db.Uuid
  name    String?
  index   String
  room    room      @relation(fields: [room_id], references: [id])
  message message[]
}

model transcription {
  id                   String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at           DateTime             @default(now()) @db.Timestamptz(6)
  updated_at           DateTime             @default(now()) @db.Timestamptz(6)
  sonix_media_id       String               @unique
  transcript           Json?
  status               String
  transcription_status transcription_status @relation(fields: [status], references: [value])
  message              message[]
}

model transcription_status {
  value         String          @id
  transcription transcription[]
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String?             @unique
  name              String?
  avatar_url        String?
  created_at        DateTime            @default(now()) @db.Timestamptz(6)
  email_verified    DateTime?           @db.Timestamptz(6)
  account           account[]
  message           message[]
  room              room[]
  room_invites      room_invites[]
  room_participants room_participants[]
}

model verification_requests {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(6)
}
